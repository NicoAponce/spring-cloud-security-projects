package pe.nicolas.item.controllers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.beans.factory.annotation.Value;import org.springframework.cloud.context.config.annotation.RefreshScope;import org.springframework.core.env.Environment;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import pe.nicolas.item.models.Item;import pe.nicolas.item.models.Product;import pe.nicolas.item.models.service.ItemService;import java.util.HashMap;import java.util.List;import java.util.Map;@RefreshScope@RestControllerpublic class ItemController {    @Autowired    private Environment env;    @Autowired    @Qualifier("serviceFeign")    private ItemService itemService;    @Value("${config.text}")    private String text;    @GetMapping("/select")    public List<Item> select() {        return itemService.findAll();    }    @GetMapping("select/{id}/quantity/{quantity}")    public Item get(@PathVariable Long id, @PathVariable Integer quantity) {        return itemService.findById(id, quantity);    }    @GetMapping("/get-config")    public ResponseEntity<?> getConfig(@Value("${server.port}") String port) {        Map<String, String> json = new HashMap<>();        json.put("text", text);        json.put("port", port);        if (env.getActiveProfiles().length > 0 && env.getActiveProfiles()[0].equals("dev")) {            json.put("author.name", env.getProperty("config.author.name"));            json.put("author.email", env.getProperty("config.author.email"));        }        return new ResponseEntity<Map<String, String>>(json, HttpStatus.OK);    }    @PostMapping("/add")    @ResponseStatus(HttpStatus.CREATED)    public Product save(@RequestBody Product product) {        return itemService.save(product);    }    @PutMapping("/edit/{id}")    @ResponseStatus(HttpStatus.CREATED)    public Product update(@RequestBody Product product, @PathVariable Long id) {        return itemService.update(product, id);    }    @DeleteMapping("/delete/{id}")    @ResponseStatus(HttpStatus.NO_CONTENT)    public void delete(@PathVariable Long id) {        itemService.delete(id);    }}