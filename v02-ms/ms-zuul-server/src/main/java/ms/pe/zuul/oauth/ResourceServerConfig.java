package ms.pe.zuul.oauth;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.cloud.context.config.annotation.RefreshScope;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.Ordered;import org.springframework.http.HttpMethod;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.filter.CorsFilter;import java.util.Arrays;@Configuration@EnableResourceServerpublic class ResourceServerConfig extends ResourceServerConfigurerAdapter {    @Override    public void configure(ResourceServerSecurityConfigurer resources) throws Exception {        resources.tokenStore(tokenStore());    }    @Override    public void configure(HttpSecurity http) throws Exception {        http.authorizeRequests().antMatchers("/api/security/oauth/**").permitAll()                .antMatchers(HttpMethod.GET,                        "/api/products/select", "/api/item/select", "/api/user/users").permitAll()                .antMatchers(HttpMethod.GET,                        "/api/products/sellect/{id}", "/api/item/select/{id}/quantity/{quantity}"                        , "/api/user/users/{id}").hasAnyRole("ADMIN", "USER")                .antMatchers("/api/products/**", "/api/item/**", "/api/user/**").hasRole("ADMIN")                .anyRequest().authenticated()                .and().cors().configurationSource(corsConfigurationSource());    }    @Bean    public CorsConfigurationSource corsConfigurationSource() {        CorsConfiguration corsConfiguration = new CorsConfiguration();        corsConfiguration.setAllowedOrigins(Arrays.asList("*"));        corsConfiguration.setAllowedMethods(Arrays.asList("POST", "GET", "PUT", "DELETE", "OPTIONS"));        corsConfiguration.setAllowCredentials(true);        corsConfiguration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", corsConfiguration);        return source;    }    @Bean    public FilterRegistrationBean<CorsFilter> filterRegistrationBean() {        FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean<>(new CorsFilter(corsConfigurationSource()));        bean.setOrder(Ordered.HIGHEST_PRECEDENCE);        return bean;    }    @Bean    public JwtTokenStore tokenStore() {        return new JwtTokenStore(accessTokenConverter());    }    @Bean    public JwtAccessTokenConverter accessTokenConverter() {        JwtAccessTokenConverter tokenConverter = new JwtAccessTokenConverter();        tokenConverter.setSigningKey("add_code_random");        return tokenConverter;    }}